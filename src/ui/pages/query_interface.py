# src/ui/pages/query_interface.py
import streamlit as st
import pandas as pd
import time
import logging
from typing import Optional

from ...agents.sql_agents import SQLAgent
from ...services.data_service import data_service
from ...services.cache_service import cache_service
from ...core.models import QueryRequest, QueryResult
from ...core.exceptions import QueryExecutionException, ValidationException
from ..utils import StreamlitUtils, UIComponents, ChartBuilder

logger = logging.getLogger(__name__)


class QueryInterfacePage:
    """Interface de requ√™te SQL avec IA"""

    def __init__(self):
        self.sql_agent = SQLAgent(data_service.db_repository, cache_service)
        self.data_service = data_service

    def render(self):
        """Affiche l'interface de requ√™te"""
        st.title("ü§ñ Assistant SQL Intelligent")

        # Instructions et exemples
        self._render_instructions()

        # Interface de requ√™te principale
        self._render_query_interface()

        # Historique des requ√™tes
        self._render_query_history()

        # Exemples de requ√™tes
        self._render_query_examples()

    def _render_instructions(self):
        """Affiche les instructions d'utilisation"""
        with st.expander("üìñ Instructions d'utilisation", expanded=False):
            st.markdown(
                """
            ### Comment utiliser l'assistant SQL ?

            1. **Posez votre question en fran√ßais** dans la zone de texte
            2. L'IA g√©n√®re automatiquement la requ√™te SQL correspondante
            3. Les r√©sultats sont affich√©s avec des options de visualisation
            4. Vous pouvez t√©l√©charger les donn√©es ou copier le code g√©n√©r√©

            ### Exemples de questions :
            - "Combien y a-t-il de zones par cat√©gorie ?"
            - "Quelles sont les 5 r√©gions avec le plus de zones sensibles ?"
            - "Montrez-moi l'√©volution des cr√©ations de zones par mois"
            - "Quelles structures g√®rent des zones li√©es aux esp√®ces ?"

            ### Donn√©es disponibles :
            - **Zones sensibles** avec leurs caract√©ristiques
            - **R√©gions et d√©partements** de localisation
            - **Structures** responsables des donn√©es
            - **Pratiques sportives** concern√©es
            - **Dates** de cr√©ation et mise √† jour
            """
            )

    def _render_query_interface(self):
        """Interface principale de requ√™te"""
        st.subheader("üí¨ Posez votre question")

        # Zone de saisie de la question
        col1, col2 = st.columns([4, 1])

        with col1:
            # G√©rer la valeur par d√©faut en utilisant une cl√© diff√©rente pour √©viter les conflits
            default_value = ""
            if "selected_question" in st.session_state:
                default_value = st.session_state.selected_question
                # Effacer apr√®s utilisation pour √©viter la r√©p√©tition
                del st.session_state.selected_question

            question = st.text_area(
                "Question en fran√ßais :",
                value=default_value,
                placeholder="Ex: Combien y a-t-il de zones sensibles par r√©gion ?",
                height=100,
                key="user_question_input",
            )

        with col2:
            st.write("")  # Espacement
            st.write("")  # Espacement

            execute_button = st.button(
                "üöÄ Ex√©cuter",
                type="primary",
                disabled=not question.strip(),
                use_container_width=True,
            )

            if st.button("üóëÔ∏è Effacer", use_container_width=True):
                # Utiliser st.rerun() avec une approche diff√©rente
                st.session_state.user_question_input = ""
                st.rerun()

        # Ex√©cution de la requ√™te
        if execute_button and question.strip():
            self._execute_query(question.strip())

    def _execute_query(self, question: str):
        """Ex√©cute une requ√™te utilisateur"""
        try:
            # Sauvegarde dans l'historique
            self._add_to_history(question)

            with st.spinner("ü§ñ G√©n√©ration de la requ√™te SQL..."):
                # Cr√©ation de la requ√™te
                query_request = QueryRequest(
                    question=question,
                    user_id=st.session_state.get("user_id", "anonymous"),
                    session_id=st.session_state.get("session_id", "default"),
                )

                # G√©n√©ration SQL
                sql_query = self.sql_agent.generate_sql_query(query_request)

                st.success(
                    f"‚úÖ Requ√™te g√©n√©r√©e avec {sql_query.confidence:.1%} de confiance"
                )

                # Affichage de la requ√™te SQL
                with st.expander("üîç Requ√™te SQL g√©n√©r√©e"):
                    st.code(sql_query.query, language="sql")

                    if sql_query.explanation:
                        st.write("**Explication:**")
                        st.write(sql_query.explanation)

                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Type de requ√™te", sql_query.query_type.value)
                    with col2:
                        st.metric("Confiance", f"{sql_query.confidence:.1%}")

            # Ex√©cution de la requ√™te
            with st.spinner("üìä Ex√©cution de la requ√™te..."):
                result = self.data_service.execute_query(sql_query.query)

                if result.data:
                    st.success(
                        f"‚úÖ {result.row_count} r√©sultats trouv√©s en {result.execution_time:.3f}s"
                    )

                    # Affichage des r√©sultats
                    self._display_query_results(result, sql_query)
                else:
                    st.warning("‚ö†Ô∏è Aucun r√©sultat trouv√©")

        except ValidationException as e:
            st.error(f"‚ùå Erreur de validation: {e.message}")

        except QueryExecutionException as e:
            st.error(f"‚ùå Erreur d'ex√©cution: {e.message}")

        except Exception as e:
            logger.error(f"Erreur inattendue lors de l'ex√©cution: {e}")
            StreamlitUtils.display_error(e, "Ex√©cution de la requ√™te")

    def _display_query_results(self, result: QueryResult, sql_query):
        """Affiche les r√©sultats de la requ√™te"""
        # Conversion en DataFrame
        df = pd.DataFrame(result.data)

        # Onglets pour les diff√©rentes vues
        tab1, tab2, tab3, tab4 = st.tabs(
            ["üìä Visualisation", "üìã Donn√©es", "üìà Graphique personnalis√©", "üíæ Export"]
        )

        # Onglet visualisation automatique
        with tab1:
            try:
                # G√©n√©ration automatique de visualisation
                viz_request = QueryRequest(
                    question=f"Cr√©er une visualisation pour: {sql_query.query}",
                    context="visualization",
                )

                viz_result = self.sql_agent.generate_visualization(viz_request, df)

                if viz_result.success:
                    st.subheader("üìä Visualisation automatique")

                    # Ex√©cution du code de visualisation
                    try:
                        exec(viz_result.python_code)
                    except Exception as e:
                        st.error(f"Erreur dans le code de visualisation: {e}")

                        # Fallback: graphique simple
                        self._create_fallback_chart(df)
                else:
                    st.warning("Impossible de g√©n√©rer une visualisation automatique")
                    self._create_fallback_chart(df)

            except Exception as e:
                logger.error(f"Erreur visualisation automatique: {e}")
                self._create_fallback_chart(df)

        # Onglet donn√©es
        with tab2:
            StreamlitUtils.display_dataframe_with_controls(df, "query_results")

            # Rapport de qualit√© des donn√©es
            if st.checkbox("üìä Afficher le rapport de qualit√©"):
                StreamlitUtils.display_data_quality_report(df)

        # Onglet graphique personnalis√©
        with tab3:
            st.subheader("üé® Cr√©er un graphique personnalis√©")
            chart_builder = ChartBuilder(df)
            custom_chart = chart_builder.create_interactive_builder()

            if custom_chart:
                # Option de sauvegarde du graphique
                if st.button("üíæ Sauvegarder ce graphique"):
                    # Ici, on pourrait sauvegarder la configuration
                    st.success("Configuration sauvegard√©e!")

        # Onglet export
        with tab4:
            self._render_export_options(df, result, sql_query)

    def _create_fallback_chart(self, df: pd.DataFrame):
        """Cr√©e un graphique de fallback simple"""
        try:
            if len(df.columns) >= 2:
                # D√©tection automatique du type de graphique appropri√©
                numeric_cols = df.select_dtypes(include=["int64", "float64"]).columns
                categorical_cols = df.select_dtypes(include=["object"]).columns

                if len(numeric_cols) >= 1 and len(categorical_cols) >= 1:
                    # Graphique en barres
                    import plotly.express as px

                    x_col = categorical_cols[0]
                    y_col = numeric_cols[0]

                    # Limitation des donn√©es
                    if len(df) > 20:
                        df_plot = df.nlargest(20, y_col)
                        st.info("Affichage des 20 premi√®res valeurs")
                    else:
                        df_plot = df

                    fig = px.bar(df_plot, x=x_col, y=y_col)
                    fig.update_layout(
                        title="Visualisation des r√©sultats", xaxis_tickangle=-45
                    )

                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info(
                        "Type de donn√©es non adapt√© pour une visualisation automatique"
                    )
            else:
                st.info("Donn√©es insuffisantes pour cr√©er une visualisation")

        except Exception as e:
            logger.error(f"Erreur graphique fallback: {e}")
            st.error("Impossible de cr√©er une visualisation")

    def _render_export_options(self, df: pd.DataFrame, result: QueryResult, sql_query):
        """Options d'export des r√©sultats"""
        st.subheader("üíæ Options d'export")

        col1, col2 = st.columns(2)

        with col1:
            st.write("**Formats de donn√©es:**")

            # Export CSV
            csv_data = df.to_csv(index=False)
            st.download_button(
                "üìÑ T√©l√©charger CSV",
                csv_data,
                file_name=f"query_results_{int(time.time())}.csv",
                mime="text/csv",
            )

            # Export JSON
            json_data = df.to_json(orient="records", indent=2)
            st.download_button(
                "üìã T√©l√©charger JSON",
                json_data,
                file_name=f"query_results_{int(time.time())}.json",
                mime="application/json",
            )

            # Export Excel
            try:
                import io

                buffer = io.BytesIO()
                with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
                    df.to_excel(writer, sheet_name="R√©sultats", index=False)

                st.download_button(
                    "üìä T√©l√©charger Excel",
                    buffer.getvalue(),
                    file_name=f"query_results_{int(time.time())}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                )
            except ImportError:
                st.info("Export Excel non disponible (openpyxl requis)")

        with col2:
            st.write("**Code et requ√™tes:**")

            # Export SQL
            st.download_button(
                "üóÉÔ∏è T√©l√©charger SQL",
                sql_query.query,
                file_name=f"query_{int(time.time())}.sql",
                mime="text/plain",
            )

            # Rapport complet
            report = self._generate_report(result, sql_query)
            st.download_button(
                "üìë Rapport complet",
                report,
                file_name=f"report_{int(time.time())}.md",
                mime="text/markdown",
            )

    def _generate_report(self, result: QueryResult, sql_query) -> str:
        """G√©n√®re un rapport complet"""
        report = f"""# Rapport de Requ√™te SQL

## Informations g√©n√©rales
- **Date d'ex√©cution:** {time.strftime('%d/%m/%Y %H:%M:%S')}
- **Nombre de r√©sultats:** {result.row_count}
- **Temps d'ex√©cution:** {result.execution_time:.3f} secondes
- **Type de requ√™te:** {sql_query.query_type.value}
- **Confiance:** {sql_query.confidence:.1%}

## Requ√™te SQL
```sql
{sql_query.query}
```

## Explication
{sql_query.explanation or 'Aucune explication disponible'}

## Colonnes des r√©sultats
{', '.join(result.columns)}

## Statistiques
- Hash de la requ√™te: {result.query_hash}
- Colonnes: {len(result.columns)}
- Lignes: {result.row_count}

---
*Rapport g√©n√©r√© par LPO AI - SQL Query Visualizer*
"""
        return report

    def _add_to_history(self, question: str):
        """Ajoute une question √† l'historique"""
        if "query_history" not in st.session_state:
            st.session_state.query_history = []

        # √âviter les doublons
        if question not in st.session_state.query_history:
            st.session_state.query_history.insert(0, question)

        # Limiter l'historique √† 20 √©l√©ments
        if len(st.session_state.query_history) > 20:
            st.session_state.query_history = st.session_state.query_history[:20]

    def _render_query_history(self):
        """Affiche l'historique des requ√™tes"""
        if "query_history" in st.session_state and st.session_state.query_history:
            with st.expander("üìö Historique des requ√™tes"):
                st.write("Cliquez sur une question pour la r√©utiliser :")

                for i, past_question in enumerate(st.session_state.query_history[:10]):
                    col1, col2 = st.columns([4, 1])

                    with col1:
                        if st.button(
                            f"üí¨ {past_question[:80]}{'...' if len(past_question) > 80 else ''}",
                            key=f"history_{i}",
                            use_container_width=True,
                        ):
                            # Utiliser une cl√© diff√©rente pour √©viter les conflits
                            st.session_state.selected_question = past_question
                            st.rerun()

                    with col2:
                        if st.button("üóëÔ∏è", key=f"delete_history_{i}"):
                            st.session_state.query_history.pop(i)
                            st.rerun()

                # Bouton pour effacer tout l'historique
                if st.button("üóëÔ∏è Effacer tout l'historique"):
                    st.session_state.query_history = []
                    st.rerun()

    def _render_query_examples(self):
        """Affiche des exemples de requ√™tes"""
        with st.expander("üí° Exemples de questions"):
            examples = [
                {
                    "category": "üìä Statistiques g√©n√©rales",
                    "questions": [
                        "Combien y a-t-il de zones sensibles au total ?",
                        "Quelle est la r√©partition des zones par cat√©gorie ?",
                        "Combien de r√©gions sont couvertes ?",
                        "Quel est le nombre moyen de zones par r√©gion ?",
                    ],
                },
                {
                    "category": "üìà Statistiques par zone",
                    "questions": [
                        "Combien de zones sont en cours de construction ?",
                        "Quelles sont les zones les plus r√©centes ?",
                        "Quelles sont les zones les plus anciennes ?",
                        "Quelles sont les zones les plus importantes ?",
                    ],
                },
                {
                    "category": "üó∫Ô∏è Analyses g√©ographiques",
                    "questions": [
                        "Quelles sont les 10 r√©gions avec le plus de zones sensibles ?",
                        "Combien de zones y a-t-il en Auvergne-Rh√¥ne-Alpes ?",
                        "Quels d√©partements ont le moins de zones sensibles ?",
                        "R√©partition des zones par pays",
                    ],
                },
                {
                    "category": "üè¢ Analyses par structure",
                    "questions": [
                        "Quelles structures g√®rent le plus de zones ?",
                        "Combien de zones sont g√©r√©es par la LPO ?",
                        "Quelles structures travaillent sur les esp√®ces ?",
                        "R√©partition des structures par r√©gion",
                    ],
                },
                {
                    "category": "üéØ Analyses par pratique",
                    "questions": [
                        "Quelles sont les pratiques sportives les plus concern√©es ?",
                        "Combien de zones concernent la randonn√©e ?",
                        "R√©partition des pratiques par r√©gion",
                        "Quelles pratiques sont interdites dans le plus de zones ?",
                    ],
                },
                {
                    "category": "üìÖ Analyses temporelles",
                    "questions": [
                        "√âvolution du nombre de zones cr√©√©es par mois",
                        "Quelles zones ont √©t√© mises √† jour r√©cemment ?",
                        "R√©partition des cr√©ations par ann√©e",
                        "Zones cr√©√©es cette ann√©e",
                    ],
                },
            ]

            for example_group in examples:
                st.write(f"**{example_group['category']}**")

                for question in example_group["questions"]:
                    if st.button(
                        f"üí¨ {question}",
                        key=f"example_{hash(question)}",
                        use_container_width=True,
                    ):
                        # Utiliser une cl√© diff√©rente pour √©viter les conflits
                        st.session_state.selected_question = question
                        st.rerun()

                st.write("")  # Espacement


# Instance de la page
query_interface_page = QueryInterfacePage()
